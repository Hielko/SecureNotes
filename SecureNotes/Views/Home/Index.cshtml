@model TextViewModel

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Notes</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
</head>


<body>
    <!-- Modal create -->
    <div class="modal fade" id="modalCreate" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Create note</h4>
                </div>
                <div class="modal-body">
                    <input type="text" id="newbutton" class="form-control" placeholder="New file" maxlength="20" pattern="[a-zA-Z0-9]">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" onclick=createClicked(this); class="btn btn-primary">Create</button>
                </div>
            </div>
        </div>
    </div>

    <header class="header">
        <div id="alert" style="height:50px;" class="alert alert-info" role="alert">
            Ready
        </div>
    </header>

    <!-- Main Content -->
    <div id="summernote"></div>

    <!-- Toggle Button -->
    <button class="btn btn-light toggle-btn shadow-sm" onclick="toggleSidebar()">
        <i class="bi bi-list fs-5"></i>
    </button>

    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header p-3">
            <div class="d-flex align-items-center justify-content-between">
                <ul class="nav nav-pills nav-stacked">
                    @{
                        foreach (var itm in Model.Filenames)
                        {
                            string active = itm.Equals(Model.Filename) ? "class=active" : "";
                            <li role="presentation" @active> <a href="?Filename=@itm">@itm</a></li>
                        }
                    }
                </ul>
            </div>
        </div>

        <hr />

        <!-- Add button -->
        <div class="p-3 border-bottom">
            <button type="button"
                    id="add"
                    data-toggle="modal"
                    data-dismiss="modal"
                    data-target="#modalCreate"
                    class="btn btn-secondary ">
                <i class="glyphicon glyphicon-plus"></i>
            </button>
        </div>
    </div>


    <script>
        $(document).ready(function() {

            $('#modalCreate').on('shown.bs.modal', function () {
              $('#newbutton').focus()
            });


            $(window).on('resize', function() {
                 adjustSize();
            });

            var alert = $('#alert');
            $('#summernote').summernote({
                placeholder: '',
                tabsize: 2,
                height: 520,
                minHeight: null, // set minimum height of editor
                maxHeight: null, // set maximum height of editor
            });

            var to = 0;
            var data;

            var text = '@Model.Text';
            if (text)
                $('#summernote').summernote('editor.pasteHTML'  ,htmlDecode(text));

            $('#summernote').on('summernote.change', function(we, contents, $editable) {

               alert.html("Typeing");
               data =  JSON.stringify({ '@nameof(Model.Filename)': '@Model.Filename', '@nameof(Model.Text)': contents });
               clearTimeout(to);

               to = setTimeout(function() {
                    fetch("Home/Save",{
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: data
                    })
                    .then((response) => response.json())
                    .then((json) => {
                        console.log("response: "+json);
                        alert.html("response: "+json);
                    })
                    .catch((error) => {
                        console.log("Error: "+error);
                        alert.html("Error: "+error);
                    });
                }, 1500);
             });

             adjustSize();
         });


        function adjustSize() {
             let h = window.innerHeight;
             console.log("Height: "+h);
             let hh = $(".header").height();
             console.log(h-hh);
             // 100.. buttonbar?
             $('div.note-editable').height((h-hh) - 100);
        }

        function htmlDecode(input) {
           let doc = new DOMParser().parseFromString(input, "text/html");
           return doc.documentElement.textContent;
        }

        function createClicked(el) {
             let val = document.getElementById("newbutton").value;
             window.location = window.location.origin+"?filename="+val;
        }

        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const toggleBtn = document.querySelector('.toggle-btn');
            sidebar.classList.toggle('collapsed');
            toggleBtn.classList.toggle('collapsed');
        }

    </script>
</body>
</html>
